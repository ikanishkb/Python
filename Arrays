1)Take as input N, the size of array. Take N more inputs and store them into the array. Write a function which returns the maximum value in the array. Print the value returned.
def max_val(arr):
    max = 0
    for v in arr:
        if v > max:
            max = v
    return max

arr=list()

size = int(input("Enter the size of the array: "))

for i in range(size):
    n = int(input("Enter the element"))
    arr.append(n)

print(max_val(arr))

2)Take as input a number M. Write a function which returns the index on which M is found in the array, in case M is not found -1 is returned. Print the value returned
def search_ele(arr,n):
    for i,v in enumerate(arr):
        if n == v:
            return i
    return -1


arr = [2,4,6,8,3,10,3]
n= int(input("enter a number to search: "))
print(search_ele(arr,n))

3)  Take as input a number M. Write a function which returns the index on which M is found in the array, in case M is not found -1 is returned. Print the value returned. You can assume that the array is sorted, but you have to optimize the finding process. For an array of size 1024, you can make 10 comparisons at maximum(binary search)
def binary_seacrh(arr,n):
    left = 0
    right = len(arr)-1
    while left<= right:
        mid = (left + right) // 2
        if arr[mid]>n:
            right = mid
        elif arr[mid]<n:
            left = mid
        if arr[mid] == n:
            return mid
    return -1

arr = [2,4,6,8,10,12]
print(binary_seacrh(arr,2))

4) Write a function that reverses the array. Use a separate “swap” function. Print the values in reversed array.
def swap_ele(arr,i,j):
    arr[i], arr[j] = arr[j], arr[i]

def reverse_arr(arr):
    left = 0
    right = len(arr)-1
    while(left<right):
        swap_ele(arr,left,right)
        left +=1
        right -=1

arr = [1,2,3,4,5,6,7,8,9,10]
reverse_arr(arr)
print(arr)

5) sorting
def swap(arr, i, j):
    arr[i], arr[j] = arr[j], arr[i]


def bubble_sort(arr):
    n = len(arr)
    for j in range(1, n):
        for i in range(n - j):
            if arr[i] > arr[i + 1]:
                swap(arr, i, i + 1)


my_list=[9,8,7,6,5,4,3,2,1]
bubble_sort(my_list)
print(my_list)

def selection_sort(arr):
    n = len(arr)
    for j in range(n - 1):
        for i in range(j + 1, n):
            if arr[j] > arr[i]:
                swap(arr, j, i)


my_list=[9,8,7,6,5,4,3,2,1]
selection_sort(my_list)
print(my_list)

def insertion_sort(arr):
    n = len(arr)
    for j in range(1, n):
        for i in range(j, 0, -1):
            if arr[i] < arr[i - 1]:
                swap(arr, i, i - 1)
            else:
                break
my_list = [9, 8, 7, 6, 5, 4, 3, 2, 1]
insertion_sort(my_list)
print(my_list)

6) For a given list representing the values of a particular Stock at regular interval of time, find the maximum profit you can make if you can buy only once and sell only once.
stock = [20,30,20,40,60,30,20,50,40,30]

max_profit = 0
min = stock[0]
buy_at = stock[0]
sell_at = stock[0]
for v in stock:
    if v-min>max_profit:
        max_profit = v - min
        buy_at = min
        sell_at = v
    if v < min:
        min = v
print(buy_at, sell_at, max_profit)

7)  Write a function which returns the intersection of two arrays (ArrayList in Java). Print the list returned
1. Duplicates allowed in an array
2.Duplicates not allowed in an array

def intersection(arr1, arr2):
    bubble_sort(arr1)
    bubble_sort(arr2)
    arr = []
    for i in range(len(arr1)):
        if arr1[i] == arr2[i]:
            arr.append(arr1[i])
        else:
            pass
    return arr

arr1 = [1, 2, 3, 1, 2, 4, 1]
arr2 = [2, 1, 3, 1, 5, 2, 2]
print(intersection(arr1, arr2))

print(set(intersection(arr1, arr2)))

8) Take as input a “target” number. Write a function which prints all pairs of numbers in a list that sum to the given target. E.g. For [3, 1, 9, 7, 5, -1] and target of 8 the output is -1 and 9, 1 and 7, 3 and 5
def target_pair(arr, target):
    for i in range(len(arr)):
        a = arr[i]
        for j in range(i, len(arr)):
            b = arr[j]
            if (a+b) == target:
                print(a, end=" ")
                print(b)

arr = [3, 1, 9, 7, 5, -1]
target_pair(arr, 8)

9) Take as input “target”, a number. Write a function which prints all triplets of numbers which sum to target.
def target_pair(arr, target):
    for i in range(len(arr)):
        a = arr[i]
        for j in range(i, len(arr)):
            b = arr[j]
            for k in range(j,len(arr)):
                c = arr[k]
                if (a+b+c) == target:
                    print(a, end=" ")
                    print(b, end=" ")
                    print(c)

arr = [3, 1, 9, 7, 5, -1]
target_pair(arr, 9)

10)  Write a function that returns the sum of two arrays, similar to the sum of 2 numbers
def add(arr1,arr2):
    n1 = len(arr1)
    n2 = len(arr2)
    n = max(n1, n2) + 1
    result = []
    c = 0
    for i in range(1, n+1):
        a = arr1[n1-i] if n1 >= i else 0
        b = arr2[n2-i] if n2 >= i else 0
        s = a + b + c
        c = s // 10
        result.insert(0, s % 10)
    return result


arr1 =    [9, 9, 9]
arr2 = [9, 9, 9, 9]

print(add(arr1, arr2))

11) Take as input N, the size of array. Take N more inputs (1 through N) and store that in an array. Write a function that returns the inverse of this array. Print the values in inverted array. Definition of inverse:
Inverse of 54123 is 34521.
def order(arr):
    arr2 = list()
    for i in range(5):
        arr2.append(0)

    for i in range(len(arr)):
        x = arr[i]
        arr2.pop(x-1)
        arr2.insert(x-1, i+1)
    return arr2

arr = [5, 4, 1, 2, 3]
print(order(arr))

12) Write a function that returns true if an array is mirror-inverse and false otherwise.
def mirror_inverse(arr):
    arr_store = order(arr)
    count = 0
    for v in arr_store:
        if v == 0:
            count+=1
    if len(arr_store)//2 == count:
        return True
    else:
        return False

arr = [1,2,4,3,1]
print(mirror_inverse(arr))
